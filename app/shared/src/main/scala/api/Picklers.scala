package api

import scala.collection.immutable.{Seq, Set}

import boopickle.Default._

import models.accounting.config._
import common.time.LocalDateTime
import java.time.{LocalDate, LocalTime}

object Picklers {
  // This pickler should normally be autogenerated by boopickle, but there seems to be a bug
  // causing this not to work. Fixed by manually picking templates.
  implicit object TemplatePickler extends Pickler[Template] {
    override def pickle(template: Template)(implicit state: PickleState): Unit = {
      state.pickle(template.code)
      state.pickle(template.name)
      state.pickle(template.placement.map(_.toString))
      state.pickle(template.onlyShowForUserLoginNames)
      state.pickle(template.zeroSum)
      state.pickle(template.iconClass)
      state.pickle(template.transactions)
    }
    override def unpickle(implicit state: UnpickleState): Template = {
      Template(
        code = state.unpickle[String],
        name = state.unpickle[String],
        placement = state.unpickle[Set[String]].map(Template.Placement.fromString),
        onlyShowForUserLoginNames = state.unpickle[Option[Set[String]]],
        zeroSum = state.unpickle[Boolean],
        iconClass = state.unpickle[String],
        transactions = state.unpickle[Seq[Template.Transaction]]
      )
    }
  }

  implicit object LocalDateTimePickler extends Pickler[LocalDateTime] {
    //    int year, int month, int dayOfMonth
    override def pickle(dateTime: LocalDateTime)(implicit state: PickleState): Unit = {
      val date = dateTime.toLocalDate
      val time = dateTime.toLocalTime

      state.pickle(date.getYear)
      state.pickle(date.getMonth.getValue)
      state.pickle(date.getDayOfMonth)
      state.pickle(time.getHour)
      state.pickle(time.getMinute)
      state.pickle(time.getSecond)
    }
    override def unpickle(implicit state: UnpickleState): LocalDateTime = {
      LocalDateTime.of(
        LocalDate.of(
          state.unpickle[Int] /* year */,
          state.unpickle[Int] /* month */,
          state.unpickle[Int] /* dayOfMonth */
        ),
        LocalTime.of(
          state.unpickle[Int] /* hour */,
          state.unpickle[Int] /* minute */,
          state.unpickle[Int] /* second */
        )
      )
    }
  }
}