package api

import java.nio.ByteBuffer
import java.time.{LocalDate, LocalTime}

import api.ScalaJsApi.EntityType
import api.ScalaJsApi.EntityType._
import boopickle.Default._
import common.time.LocalDateTime
import models.User
import models.accounting.{BalanceCheck, Transaction, TransactionGroup}
import models.accounting.config._
import models.accounting.money.ExchangeRateMeasurement
import models.manager.Entity

import scala.collection.immutable.{Seq, Set}

object Picklers {
  // This pickler should normally be autogenerated by boopickle, but there seems to be a bug
  // causing this not to work. Fixed by manually picking templates.
  implicit object TemplatePickler extends Pickler[Template] {
    override def pickle(template: Template)(implicit state: PickleState): Unit = {
      state.pickle(template.code)
      state.pickle(template.name)
      state.pickle(template.placement.map(_.toString))
      state.pickle(template.onlyShowForUserLoginNames)
      state.pickle(template.zeroSum)
      state.pickle(template.iconClass)
      state.pickle(template.transactions)
    }
    override def unpickle(implicit state: UnpickleState): Template = {
      Template(
        code = state.unpickle[String],
        name = state.unpickle[String],
        placement = state.unpickle[Set[String]].map(Template.Placement.fromString),
        onlyShowForUserLoginNames = state.unpickle[Option[Set[String]]],
        zeroSum = state.unpickle[Boolean],
        iconClass = state.unpickle[String],
        transactions = state.unpickle[Seq[Template.Transaction]]
      )
    }
  }

  implicit object LocalDateTimePickler extends Pickler[LocalDateTime] {
    override def pickle(dateTime: LocalDateTime)(implicit state: PickleState): Unit = {
      val date = dateTime.toLocalDate
      val time = dateTime.toLocalTime

      state.pickle(date.getYear)
      state.pickle(date.getMonth.getValue)
      state.pickle(date.getDayOfMonth)
      state.pickle(time.getHour)
      state.pickle(time.getMinute)
      state.pickle(time.getSecond)
    }
    override def unpickle(implicit state: UnpickleState): LocalDateTime = {
      LocalDateTime.of(
        LocalDate.of(
          state.unpickle[Int] /* year */ ,
          state.unpickle[Int] /* month */ ,
          state.unpickle[Int] /* dayOfMonth */
        ),
        LocalTime.of(
          state.unpickle[Int] /* hour */ ,
          state.unpickle[Int] /* minute */ ,
          state.unpickle[Int] /* second */
        )
      )
    }
  }


  implicit object EntityTypePickler extends Pickler[EntityType.Any] {
    override def pickle(entityType: EntityType.Any)(implicit state: PickleState): Unit = {
      val intValue: Int = entityType match {
        case UserType => 1
        case TransactionType => 2
        case TransactionGroupType => 3
        case BalanceCheckType => 4
        case ExchangeRateMeasurementType => 5
      }
      state.pickle(intValue)
    }
    override def unpickle(implicit state: UnpickleState): EntityType.Any = {
      state.unpickle[Int] match {
        case 1 => UserType
        case 2 => TransactionType
        case 3 => TransactionGroupType
        case 4 => BalanceCheckType
        case 5 => ExchangeRateMeasurementType
      }
    }
  }

  implicit val entityPickler = compositePickler[Entity].
    addConcreteType[User].
    addConcreteType[Transaction].
    addConcreteType[TransactionGroup].
    addConcreteType[BalanceCheck].
    addConcreteType[ExchangeRateMeasurement]
}